var module=angular.module("angularThree",[]),hasWebGL=function(){try{var canvas=document.createElement("canvas");return!(!window.WebGLRenderingContext||!canvas.getContext("webgl")&&!canvas.getContext("experimental-webgl"))}catch(e){return!1}};module.factory("$three",function($document,$timeout){var renderer,canvas,scene,camera,updateCallbacks=[];return{renderer:function(value){return value?void(renderer=value):renderer},canvas:function(value){return value?void(canvas=value):canvas},scene:function(value){return value?void(scene=value):scene},camera:function(value){return value?void(camera=value):camera},webgl:function(value){return value?void(webgl=value):webgl},initialize:function(initCallback){$timeout(function(){if(initCallback&&initCallback(),canvas){canvas.append(renderer.domElement);var render=function(){requestAnimationFrame(render),renderer.render(scene,camera);for(var i=0;i<updateCallbacks.length;++i)updateCallbacks[i]()};render()}else console.error("No HTML container to render into. Please provide container id through three-canvas directive.")})},dispose:function(disposeCallback){disposeCallback&&disposeCallback(),console.log("Disposing Scene")},pushUpdate:function(callback){updateCallbacks.push(callback)}}}),module.controller("rendererController",function($scope,$three){$scope.bindRenderer=function(type){var webglAvailable=hasWebGL(),autoDetect=!type||"autodetect"===type;if("webgl"===type||autoDetect&&webglAvailable){var renderer=new THREE.WebGLRenderer;$three.webgl=!0}else if("canvas"===type||autoDetect){var renderer=new THREE.CanvasRenderer;$three.webgl=!1}else console.error('Unknown renderer type "'+type+'".');return renderer?($three.renderer(renderer),renderer):void 0},$scope.bindScene=function(){var scene=new THREE.Scene;return $three.scene(scene),scene},$scope.bindSize=function(object,size){object&&object.setSize?angular.isArray(size)?object.setSize(size[0],size[1]):object.setSize(size.width,size.height):console.error("This object is null or doesn't support setSize method.")}}),module.controller("sceneController",function($scope,$three){$scope.bindCamera=function(type,params){if("perspective"===type)if(4===params.length)var camera=new THREE.PerspectiveCamera(params[0],params[1],params[2],params[3]);else console.error("Missing parameters for constructor (Angle, Ratio, Near, Far).");else if("orthographic"===type)if(6===params.length)var camera=new THREE.OrthographicCamera(params[0],params[1],params[2],params[3],params[4],params[5]);else console.error("Missing parameters for constructor (left, right, top, bottom, Near, Far).");else console.error('Unknown camera type "'+type+'".');return camera?($three.camera(camera),$three.scene().add(camera),camera):void 0},$scope.bindPosition=function(object,position){object&&position?(object.position.x=position.x||0,object.position.y=position.y||0,object.position.z=position.z||0):console.error("Wrong arguments ["+object+", "+position+"]")},$scope.bindLight=function(type,params){if("point"===type)if(1===params.length)var light=new THREE.PointLight(params);else console.error("Missing parameters for constructor (Color).");else console.error('Unknown light type "'+type+'".');return light?($three.scene().add(light),light):void 0}}),module.directive("threeCanvas",function($three){var directiveObj={restrict:"E",compile:function(element,attrs,transclude){var prepostObj={pre:function(scope,element,attrs,controller){element.css("display","block"),$three.canvas(element)}};return prepostObj}};return directiveObj}),module.directive("threeRenderer",function($three){var directiveObj={restrict:"E",controller:"rendererController",compile:function(element,attrs,transclude){var prepostObj={pre:function(scope,element,attrs,controller){scope.bindRenderer(attrs.type)}};return prepostObj}};return directiveObj}),module.directive("canvas",function($three){var directiveObj={restrict:"A",require:"threeRenderer",compile:function(element,attrs,transclude){var prepostObj={pre:function(scope,element,attrs,controller){var canvas=angular.element("#"+attrs.canvas);canvas?$three.canvas(canvas):console.error("Element with id "+attrs.canvas+" not found.")}};return prepostObj}};return directiveObj}),module.directive("threeScene",function($window,$three){var directiveObj={restrict:"E",require:"^^threeRenderer",controller:"sceneController",compile:function(element,attrs,transclude){var prepostObj={pre:function(scope,element,attrs,controller){scope.bindScene()},post:function(scope,element,attrs,controller){$window.addEventListener("beforeunload",function(){$three.dispose()})}};return prepostObj}};return directiveObj}),module.directive("threeCamera",function($three){var directiveObj={restrict:"E",require:"^^threeScene",compile:function(element,attrs,transclude){var prepostObj={pre:function(scope,element,attrs,controller){var params=attrs.parameters?angular.fromJson(attrs.parameters):[],camera=scope.bindCamera(attrs.type,params);element.attr("id",camera.id)}};return prepostObj}};return directiveObj}),module.directive("threeLight",function($three){var directiveObj={restrict:"E",require:"^^threeScene",link:function(scope,element,attrs,controller){var parameters=attrs.parameters?angular.fromJson(attrs.parameters):[],light=scope.bindLight(attrs.type,parameters);element.attr("id",light.id)}};return directiveObj}),module.directive("tdPosition",function($three){var directiveObj={restrict:"A",require:"^^threeScene",link:function(scope,element,attrs,controller){attrs.$observe("tdPosition",function(newVal){var id=parseInt(element.attr("id"),10),obj=$three.scene().getObjectById(id),position=newVal?angular.fromJson(newVal):{};scope.bindPosition(obj,position)})}};return directiveObj}),module.directive("tdSize",function($three){var directiveObj={restrict:"A",require:"threeRenderer",link:function(scope,element,attrs,controller){attrs.$observe("tdSize",function(newVal){var size=newVal?angular.fromJson(newVal):{};scope.bindSize($three.renderer(),size)})}};return directiveObj});