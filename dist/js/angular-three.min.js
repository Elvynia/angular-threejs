var module=angular.module("angularThree",[]),hasWebGL=function(){try{var canvas=document.createElement("canvas");return!(!window.WebGLRenderingContext||!canvas.getContext("webgl")&&!canvas.getContext("experimental-webgl"))}catch(e){return!1}};module.factory("$three",function($document,$timeout){var renderer,canvas,scene,camera;return{renderer:function(value){return value?void(renderer=value):renderer},canvas:function(value){return value?void(canvas=angular.element("#simple-scene")):canvas},scene:function(value){return value?void(scene=value):scene},camera:function(value){return value?void(camera=value):camera},webgl:function(value){return value?void(webgl=value):webgl},initialize:function(){$timeout(function(){THREE.TextureLoader.prototype.crossOrigin="anonymous";var earthImgUrl="http://localhost:8080/ramm/earth.jpg",texloader=new THREE.TextureLoader;console.log("loading texture");var texture=texloader.load(earthImgUrl,function(){console.log("Callback running"),texture.needsUpdate=!0;var sphere=new THREE.Mesh(new THREE.SphereGeometry(50,16,16),new THREE.MeshPhongMaterial({map:texture})),pointLight=new THREE.PointLight(16777215);pointLight.position.x=10,pointLight.position.y=20,pointLight.position.z=100,scene.add(sphere),scene.add(pointLight),scene.add(camera),canvas.append(renderer.domElement);var render=function(){requestAnimationFrame(render),renderer.render(scene,camera),sphere.rotation.y+=.01};render()})})}}}),module.controller("threeController",function($scope,$three,$timeout){$scope.bindRenderer=function(type,width,height){var webglAvailable=hasWebGL(),autoDetect=!type||"autodetect"===type;if("webgl"===type||autoDetect&&webglAvailable){var renderer=new THREE.WebGLRenderer;$three.webgl=!0}else if("canvas"===type||autoDetect){var renderer=new THREE.CanvasRenderer;$three.webgl=!1}else console.error('Unknown renderer type "'+type+'".');renderer&&(width&&height&&renderer.setSize(width,height),$three.renderer(renderer))},$scope.bindCamera=function(type,params){if("perspective"===type)if(4===params.length)var camera=new THREE.PerspectiveCamera(params[0],params[1],params[2],params[3]);else console.error("Missing parameters for constructor (Needs 4 arguments).");else if("orthographic"===type)if(6===params.length)var camera=new THREE.OrthographicCamera(params[0],params[1],params[2],params[3],params[4],params[5]);else console.error("Missing parameters for constructor (Needs 4 arguments).");else console.error('Unknown camera type "'+type+'".');camera&&(camera.position.z=300,$three.camera(camera))}}),module.directive("threeRenderer",function($document,$three){var directiveObj={restrict:"E",controller:"threeController",compile:function(element,attrs,transclude){var prepostObj={pre:function(scope,element,attrs,controller){attrs.canvas?($three.canvas($document.find("#"+attrs.canvas)),scope.bindRenderer(attrs.type,attrs.width,attrs.height)):console.error("No HTML container to render into. Please provide container id through $scope or canvas attribute.")}};return prepostObj}};return directiveObj}),module.directive("threeScene",function($three){var directiveObj={restrict:"E",require:"^threeRenderer",compile:function(element,attrs,transclude){var prepostObj={pre:function(scope,element,attrs,controller){$three.scene(new THREE.Scene)}};return prepostObj}};return directiveObj}),module.directive("threeCamera",function($three){var directiveObj={restrict:"E",require:"^threeRenderer",compile:function(element,attrs,transclude){var prepostObj={pre:function(scope,element,attrs,controller){var params=attrs.parameters?angular.fromJson(attrs.parameters):[];scope.bindCamera(attrs.type,params)}};return prepostObj}};return directiveObj});